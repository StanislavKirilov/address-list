{"version":3,"sources":["features/contacts/contactSlice.js","features/contacts/EditContact.js","features/contacts/Contacts.js","features/contacts/AddContact.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["contactSlice","createSlice","name","initialState","contacts","reducers","add","state","contact","payload","currentItem","id","length","push","remove","listIndex","findIndex","contactRecord","splice","edit","contactsList","actions","EditContact","props","postcodeNode","dispatch","useDispatch","contactSelector","useSelector","useState","setState","postcodeList","setPostcodeList","applied","setApplied","handleChange","e","value","target","url","fetch","then","response","json","data","hasOwnProperty","suggestions","catch","error","console","undefined","className","onSelect","map","item","key","type","onClick","address","addressDetails","trim","split","onApplyAddress","Modal","show","onHide","handleClose","Header","closeButton","Title","Body","Form","Row","Group","as","Col","Label","htmlFor","Control","contact_name","placeholder","onChange","required","email","telephone","addr_line_1","addr_line_2","city","county","postcode","Footer","Button","variant","Contacts","EditContactComponent","setShow","setContact","onEdit","Table","striped","bordered","hover","size","colSpan","onDelete","AddContact","onSubmit","preventDefault","reset","maxLength","App","Container","fluid","React","Component","configureStore","reducer","contactReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.832bb904.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const contactSlice = createSlice({\r\n  name: 'contact',\r\n  initialState: {\r\n    contacts: []\r\n  },\r\n  reducers: {\r\n    // Adds a contact record from the store\r\n    add: (state, contact) => {\r\n      contact.payload.currentItem.id = state.contacts.length;\r\n      state.contacts.push(contact.payload.currentItem);\r\n    },\r\n    \r\n    // Removes a contact record from the store\r\n    remove: (state, contact) => {\r\n      const listIndex = state.contacts.findIndex((contactRecord) => {\r\n        return contactRecord.id === contact.payload.id;\r\n      });\r\n\r\n      state.contacts.splice(listIndex, 1);\r\n    },\r\n\r\n    // Edits a specific store record\r\n    edit: (state, contact) => {\r\n      const listIndex = state.contacts.findIndex((contactRecord) => {\r\n        return contactRecord.id === contact.payload.id;\r\n      });\r\n\r\n      state.contacts[listIndex] = contact.payload;\r\n    }\r\n  },\r\n});\r\n\r\n// Gets the entire contact list from the store\r\nexport const contactsList = state => state.contact.contacts;\r\n\r\n// export all of the reducers out as actions\r\nexport const { add, remove, edit } = contactSlice.actions;\r\n\r\nexport default contactSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport {\r\n  edit,\r\n  contactsList,\r\n} from './contactSlice';\r\n\r\n function EditContact(props) {\r\n  const dispatch = useDispatch();\r\n  const contactSelector = useSelector(contactsList);\r\n\r\n  // State of the selected contact that we want to edit\r\n  const [state, setState] = useState({ currentItem: contactSelector[props.contact.id] });\r\n  const [postcodeList, setPostcodeList] = useState([]);\r\n  const [applied, setApplied] = useState(false);\r\n\r\n  let postcodeNode;\r\n\r\n  // Changes the form state on input \r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    setState({\r\n      currentItem: {\r\n        ...state.currentItem,\r\n        [e.target.name] : value,\r\n      }\r\n    })\r\n\r\n    if (e.target.name === 'postcode' && value.length >= 6) {\r\n      setApplied(false);\r\n      let url = `https://api.getAddress.io/autocomplete/${value}?api-key=41bLQnQ_HEiE5cBI2ZSJng29594`;\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // Catching the list of suggestions\r\n          let payload = data\r\n          if (data.hasOwnProperty('length')) {\r\n            payload = data;\r\n          } else {\r\n            payload = data.suggestions\r\n          }\r\n          setPostcodeList(payload);\r\n        })\r\n        .catch(function(error) {\r\n          // catching the error\r\n          console.error(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  // Saves a contact to the store\r\n  const handleSave = (e) => {\r\n    // Saves / Edits a record on the store by the Edit reducer\r\n    dispatch(edit(state.currentItem));\r\n\r\n    // Inherted close handler to close the Modal, from Contacts.js\r\n    props.handleClose();\r\n  }\r\n\r\n  // Applies an address to the contact form\r\n  const onApplyAddress = (e, address) => {\r\n    // Maps the state to the input address from the API call after selection\r\n    let addressDetails = address.trim().split(',');\r\n    state.currentItem['addr_line_1'] = addressDetails[0];\r\n    state.currentItem['city'] = addressDetails[1];\r\n    state.currentItem['country'] = addressDetails[2];\r\n\r\n    // Updates the state reactively\r\n    setState({\r\n      currentItem: {\r\n        ...state.currentItem\r\n      }\r\n    });\r\n\r\n    // Updates the flag for the autocomplete reactively\r\n    setApplied(true);\r\n  }\r\n\r\n  // Updates the autocomplete reactively\r\n  if (!applied) {\r\n    postcodeNode = <div className=\"autocomplete-holder\" name=\"postcode\" onSelect={handleChange}>\r\n        {postcodeList.map((item, key) => {\r\n          return (\r\n            <div key={key}><input type=\"button\" onClick={(e) => { onApplyAddress(e, item.address) }} className=\"autocomplete-button\" value={item.address} /></div>\r\n          )\r\n        })}\r\n    </div>\r\n  } else {\r\n    // If an autocomplete element was selected, then remove the autocomplete results\r\n    postcodeNode = undefined;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={props.show} onHide={props.handleClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>\r\n          Edit Contact\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"form\">\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label htmlFor=\"contact_name\">\r\n                    Name </Form.Label>\r\n                    <Form.Control value={state.currentItem.contact_name} type=\"text\" placeholder=\"Contact Name\" name=\"contact_name\" onChange={handleChange} required />\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                <Form.Label htmlFor=\"email\">\r\n                  Email </Form.Label>\r\n                  <Form.Control value={state.currentItem.email} type=\"email\" placeholder=\"Email\" name=\"email\" onChange={handleChange} required />\r\n                </ Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label htmlFor=\"telephone\">\r\n                    Telephone </Form.Label>\r\n                    <Form.Control value={state.currentItem.telephone} type=\"tel\" placeholder=\"Telephone\" name=\"telephone\" onChange={handleChange} required />\r\n                </ Form.Group>\r\n              </Form.Row>\r\n              \r\n              <Form.Group>\r\n              <Form.Label htmlFor=\"addr_line_1\">\r\n                Addres Line 1 </Form.Label>\r\n                <Form.Control value={state.currentItem.addr_line_1} type=\"text\" placeholder=\"Address Line One\" name=\"addr_line_1\" onChange={handleChange} required />\r\n              </ Form.Group>\r\n              <Form.Group>\r\n                <Form.Label htmlFor=\"addr_line_2\">\r\n                  Addres Line 2 </ Form.Label>\r\n                  <Form.Control value={state.currentItem.addr_line_2} type=\"text\" placeholder=\"Address Line Two\" name=\"addr_line_2\" onChange={handleChange} />\r\n              </ Form.Group>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label htmlFor=\"city\">\r\n                    City/Town </Form.Label>\r\n                    <Form.Control value={state.currentItem.city} type=\"text\" placeholder=\"City/Town\" name=\"city\" onChange={handleChange} required />\r\n                </ Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label htmlFor=\"county\">\r\n                    County </Form.Label>\r\n                    <Form.Control value={state.currentItem.county} type=\"text\" placeholder=\"County\" name=\"county\" onChange={handleChange} />\r\n                </ Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label htmlFor=\"postcode\">\r\n                    Postcode </Form.Label>\r\n                    <Form.Control value={state.currentItem.postcode} type=\"text\" placeholder=\"PostCode\" name=\"postcode\" onChange={handleChange} required />\r\n                    { postcodeNode }\r\n                </ Form.Group>\r\n              </Form.Row>\r\n            </Form>\r\n        </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={handleSave} variant=\"outline-success\">Save</Button>\r\n          <Button onClick={props.handleClose} variant=\"outline-danger\">Cancel</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditContact;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport EditContact from './EditContact.js';\r\n\r\nimport './Contacts.css';\r\n\r\nimport {\r\n  remove,\r\n  contactsList,\r\n} from './contactSlice';\r\n\r\n function Contacts() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsList);\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [contact, setContact] = useState({});\r\n\r\n  // Closes the Modal\r\n  const handleClose = () => setShow(false);\r\n\r\n  // Shows the Modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  /**\r\n   * Removes a contact from the store\r\n   * @param {*} e the native event\r\n   * @param {*} contact the contact record\r\n   */\r\n  const onDelete = (e, contact) => {\r\n    dispatch(remove(contact));\r\n  }\r\n  let EditContactComponent;\r\n\r\n  /**\r\n   * Edits a contact from the contact list\r\n   * @param {*} e native event\r\n   * @param {*} item current contact record\r\n   */\r\n  const onEdit = (e, item) => {\r\n    handleShow();\r\n    setContact(item);\r\n  }\r\n\r\n\r\n\r\n  if (show) {\r\n    EditContactComponent = <EditContact show={show} contact={contact} handleClose={handleClose}  />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Table striped bordered hover variant=\"dark\" size=\"sm\">\r\n      <thead>\r\n      <tr>\r\n        <th>#</th>\r\n        <th>Contact Name</th>\r\n        <th>Telephone</th>\r\n        <th>Email</th>\r\n        <th colSpan={2}>Address</th>\r\n        <th>City/Town</th>\r\n        <th>County</th>\r\n        <th>PostCode</th>\r\n      </tr>\r\n    </thead>\r\n        <tbody>\r\n      {contacts.map((item, key) => {\r\n        return(\r\n              <tr key={key}>\r\n                <td>{key + 1}</td>\r\n                <td >{item.contact_name}</td>\r\n                <td >{item.telephone}</td>\r\n                <td >{item.email}</td>\r\n                <td colSpan=\"2\">{item.addr_line_1} {item.addr_line_2}</td>\r\n                <td>{item.city}</td>\r\n                <td>{item.county}</td>\r\n                <td>{item.postcode}</td>\r\n                <td className=\"button-holder\">\r\n                  <Button variant=\"outline-light\" onClick={(e) => { onEdit(e, item) } }>Edit</Button>{' '}\r\n                  <Button onClick={(e) => { onDelete(e, item) }} variant=\"outline-danger\">Delete</Button>{' '}\r\n                </td>\r\n              </tr>\r\n        );\r\n      })}\r\n        \r\n        </tbody>\r\n      </Table>\r\n      { EditContactComponent }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contacts;","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport './Contacts.css';\r\n\r\nimport {\r\n  add,\r\n} from './contactSlice';\r\n\r\n // Component reponsible for adding Contacts\r\n function AddContact() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [state, setState] = useState({\r\n    currentItem: {}\r\n  });\r\n  const [postcodeList, setPostcodeList] = useState([]);\r\n  const [applied, setApplied] = useState(false);\r\n  let postcodeNode;\r\n\r\n  // Changes the form state on input\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    setState({\r\n      currentItem: {\r\n        ...state.currentItem,\r\n        [e.target.name] : value,\r\n      }\r\n    })\r\n\r\n    if (e.target.name === 'postcode' && value.length >= 5) {\r\n      setApplied(false);\r\n      let url = `https://api.getAddress.io/autocomplete/${value}?api-key=41bLQnQ_HEiE5cBI2ZSJng29594`;\r\n      fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Catching the list of suggestions\r\n        let payload = data\r\n        if (data.hasOwnProperty('length')) {\r\n          payload = data;\r\n        } else {\r\n          payload = data.suggestions\r\n        }\r\n        setPostcodeList(payload);\r\n      })\r\n      .catch(function(error) {\r\n        // catching the error\r\n        console.error(error);\r\n      });\r\n    }\r\n  }\r\n\r\n  // Submits the current contact to the store\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Dispatches a reducer \"add\" to add a contact to the store\r\n    dispatch(add(state));\r\n\r\n    // Clear the form\r\n    e.target.reset();\r\n\r\n    // Clear the state reactively\r\n    setState({\r\n      currentItem: {}\r\n    });\r\n  }\r\n\r\n  // Applies an address to the contact form\r\n  const onApplyAddress = (e, address) => {\r\n    // Maps the state to the input address from the API call after selection\r\n    let addressDetails = address.trim().split(',');\r\n    state.currentItem['addr_line_1'] = addressDetails[0];\r\n    state.currentItem['city'] = addressDetails[1];\r\n    state.currentItem['country'] = addressDetails[2];\r\n\r\n    // Updates the state reactively\r\n    setState({\r\n      currentItem: {\r\n        ...state.currentItem\r\n      }\r\n    });\r\n\r\n    // Updates the flag for the autocomplete reactively\r\n    setApplied(true);\r\n  }\r\n\r\n  // Updates the autocomplete reactively\r\n  if (!applied) {\r\n    postcodeNode = <div className=\"autocomplete-holder\" name=\"postcode\" onSelect={handleChange}>\r\n        {postcodeList.map((item, key) => {\r\n          return (\r\n            <div key={key}><input type=\"button\" onClick={(e) => { onApplyAddress(e, item.address) }} className=\"autocomplete-button\" value={item.address} /></div>\r\n          )\r\n        })}\r\n    </div>\r\n  } else {\r\n    // If an autocomplete element was selected, then remove the autocomplete results\r\n    postcodeNode = undefined;\r\n  }\r\n\r\n  return(\r\n    <div className=\"form\">\r\n      <Form className=\"d-flex flex-column\" onSubmit={onSubmit}>\r\n        <Form.Row>\r\n          <Form.Group as={Col}>\r\n            <Form.Label htmlFor=\"contact_name\">\r\n              Name </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Contact Name\" name=\"contact_name\" onChange={handleChange} required />\r\n          </Form.Group>\r\n          <Form.Group as={Col}>\r\n          <Form.Label htmlFor=\"email\">\r\n            Email </Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"Email\" name=\"email\" onChange={handleChange} required />\r\n          </ Form.Group>\r\n          <Form.Group as={Col}>\r\n            <Form.Label htmlFor=\"telephone\">\r\n              Telephone </Form.Label>\r\n              <Form.Control type=\"tel\" placeholder=\"Telephone\" name=\"telephone\" onChange={handleChange} required />\r\n          </ Form.Group>\r\n        </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col}>\r\n        <Form.Label htmlFor=\"addr_line_1\">\r\n          Addres Line 1 </Form.Label>\r\n          <Form.Control type=\"text\" placeholder=\"Address Line One\" value={state.currentItem.addr_line_1} name=\"addr_line_1\" onChange={handleChange} required />\r\n        </ Form.Group>\r\n        <Form.Group as={Col}>\r\n          <Form.Label htmlFor=\"addr_line_2\">\r\n            Addres Line 2 </ Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Address Line Two\" name=\"addr_line_2\" onChange={handleChange} />\r\n        </ Form.Group>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Form.Group as={Col}>\r\n            <Form.Label htmlFor=\"city\">\r\n              City/Town </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"City/Town\" value={state.currentItem.city} name=\"city\" onChange={handleChange} required />\r\n          </ Form.Group>\r\n          <Form.Group as={Col}>\r\n            <Form.Label htmlFor=\"county\">\r\n              County </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"County\" value={state.currentItem.county} name=\"county\" onChange={handleChange} />\r\n          </ Form.Group>\r\n          <Form.Group as={Col}>\r\n            <Form.Label htmlFor=\"postcode\">\r\n              Postcode </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"PostCode\" value={state.currentItem.postcode} name=\"postcode\" onChange={handleChange} maxLength=\"8\" required />\r\n              {postcodeNode}\r\n          </ Form.Group>\r\n        </Form.Row>\r\n        <Button className=\"align-self-end\" variant=\"outline-success\" type=\"submit\">Submit</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddContact;","import React from 'react';\r\nimport './App.css';\r\nimport Contacts from './features/contacts/Contacts.js';\r\nimport AddContact from './features/contacts/AddContact.js';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <Container fluid=\"sm\">\r\n        <Row className=\"justify-content-sm-center\">\r\n          <Col >\r\n            <AddContact />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-sm-center\">\r\n          <Col>\r\n            <Contacts />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactReducer from '../features/contacts/contactSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    contact: contactReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}